@page "/Register"

<div class="container-fluid">
	<div class="row">
		<div class="col-xl-6 mx-auto rounded border p-4" style="margin: 60px;" >
			<h3 class="text-center mb-3">Register</h3>
			<hr />

			@if (errors.Length > 0)
			{
				<div class="alert alert-danger alert-dismissible fade show" role="alert">
					<strong>@errors</strong>
					<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
				</div>
			}

			<div class="mb-3">
				<label for="email" class="form-label">Email</label>
				<input type="email" class="form-control" id="email" @bind="email" />
			</div>

			<div class="mb-3">
				<label for="password" class="form-label">Password</label>
				<input type="password" class="form-control" id="password" @bind="password" />
			</div>

			<div class="mb-3">
				<label for="confirmPassword" class="form-label">Confirm Password</label>
				<input type="password" class="form-control" id="confirmPassword" @bind="confirmPassword" />
			</div>

			<div class="row">
				<div class="col d-grid">
					<button class="btn btn-primary" @onclick="RegisterAsync">Register</button>
				</div>
			</div> 

			<div class="col d-grid
			">
				<a class="btn btn-outline-primary" href="/" role="button">
					Cancel
				</a>
			</div>
		</div>
	</div>
</div>


@inject AuthenticationStateProvider provider
@inject NavigationManager navManager
@code {
	public string email = "";
	public string password = "";
	public string confirmPassword = "";
	public string errors = "";


	private async Task RegisterAsync()
	{
		if (password != confirmPassword)
		{
			errors = "Passwords do not match";
			return;
		}

		var authStateProvider = (CustomAuthStateProvider)provider;
		var registerDto = new RegisterDto
			{
				Email = email,
				Password = password
			};

		var resp = await authStateProvider.RegisterAsync(registerDto);
		if (resp.Succeeded)
		{
			navManager.NavigateTo("/");
		}
		else
		{
			errors = resp.Error[0];
		}
		
	}
	
}
